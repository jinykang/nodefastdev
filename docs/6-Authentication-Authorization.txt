

0)관련 노드 팩키지 설치하기 
npm i bcryptjs
npm i express-session
npm i connect-flash

npm i passport
npm i passport-local


1)app.js express-session 세션설정하기 


//express기반 서버세션 관리 팩키지 참조하기 
var session = require('express-session');

...
//sequelize.sync(); 
...

//노드 어플리케이션의 세션 기본 설정값 세팅하기 
app.use(
  session({
    resave: false,//세션을 항상 저장할지여부
    saveUninitialized: true, //세션이 저장되기전 초기화 안된상태로 미리 저장공간을 만들지여부
    secret: "testsecret", //세션키값을 암호할때 사용할 키값
    cookie: {
      httpOnly: true,
      secure: false,
      maxAge:1000 * 60 * 5 //5분동안 서버세션을 유지하겠다.(1000은 1초)
    },
  }),
);



2)로그인 화면 구성하기 
-routes\member.js

//passport 객체 참조
const passport = require('passport');


//bcryptjs참조
const bcrypt = require('bcryptjs');


 
//Case1: 일반적인 방식으로 로그인 처리하기-ONLY EXPRESS-SESSION만 이용해 구현함.. 
router.post('/login1', async(req, res, next)=> {

  var userid = req.body.userid;
  var userpwd = req.body.userpwd;

  var member = await db.Member.findOne({where:{email:userid}});


  var loginResult = "";

  if(member != null){

    loginResult ="사용자 아이디가 존재합니다.";
    var isCorrectPwd = await bcrypt.compare(userpwd,member.member_pwd);

      if(isCorrectPwd){
        loginResult ="동일한 암호입니다.";

        req.session.isLogined = true;
        req.session.loginUser ={
          userSeq:member.member_id,
          userId:member.email,
          userName:member.name,
          userProfile:member.profile_path
        };


        req.session.save(function(){
          res.redirect('/members/list');
        });


      }else{
        loginResult ="사용자 암호가 동일하지 않습니다.";
        res.render('member/login',{layout:'layoutLogin',loginResult});
      }

  
  }else{
    loginResult ="사용자 아이디가 존재하지 않습니다.";
    res.render('member/login',{layout:'layoutLogin',loginResult});
  }
});


-views\member\login.ejs
<form class="m-t" role="form" action="/members/login" method="post">
                <div class="form-group">
                    <input type="email" class="form-control" placeholder="Username" required="" name="userid">
                </div>
                <div class="form-group">
                    <input type="password" class="form-control" placeholder="Password" required="" name="userpwd">
                </div>
                <button type="submit" class="btn btn-primary block full-width m-b">Login</button>

                <a href="#"><small>Forgot password?</small></a>
                <p class="text-muted text-center"><small>Do not have an account?</small></p>
                <a class="btn btn-sm btn-white btn-block" href="register.html">Create an account</a>
</form>




3)패스트포트 방식 로그인 구현 

//Case2:패스포트+EXPRESS-SESSION 방식으로 로그인 처리하기 
//인증 및 세션 관리방법 2: passport 기반 적용
router.post('/login2', async(req, res, next)=> {

  passport.authenticate('local', (authError, user, info) => {

    if (authError) {
      console.error(authError);
      return next(authError);
    }

    //사용자 세션 저장용 정보가 없으면 에러처리
    if (!user) {
      req.flash('loginError', info.message);
      return res.redirect('/members/login');
    }

    return req.login(user, (loginError) => {
      if (loginError) {
        console.error(loginError);
        return next(loginError);
      }

      //정상 로그인시 메인페이지 이동
      return res.redirect('/members/list');
    });
  })(req, res, next); 

});




4)passport폴더 생성 및 
index.js
localStrategy.js 파일 생성

--index.js
const local = require('./localStrategy');

module.exports = passport => {
  //로그인한 사용자의 기본정보만 req.session객체에 저장
  //req.login()메소드 호출시 자동 호출됨.
  passport.serializeUser((user, done) => {
    //req.session 객체에 저장할 로그인 사용자의 기초 데이터 세팅
    //저장할 관리자 세션의 기본정보세팅
    done(null, user);
  });

  //매 요청시마다 실행 : app.js내 passport.session()미들웨어에서 호출
  //필요한 경우 로그인한 관리자의 풀정보를 조회하여 사용할수 있는 기능제공
  passport.deserializeUser((user, done) => {
    done(null, user);
  });

  local(passport);
};



--localStrategy.js

const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcryptjs');
const db = require('../models');

//회원정보가 존재하는 모델 조회
const { Member } = require('../models');


module.exports = passport => {

  passport.use(
    new LocalStrategy(
      {
        usernameField: 'userid', //로그인 페이지의 사용자아이디 UI INPUT 요소 name값
        passwordField: 'userpwd',//로그인 페이지의 사용자 암호 INPUT 요소 name값
      },
      async (userId, userPWD, done) => {


        try {

          const exUser = await db.Member.findOne({ where: { email: userId } });

          //사용자 아이디 정보가 존재하면
          if (exUser) {

            //사용자 입력한 암호를 비교한다.
            const result = await bcrypt.compare(userPWD, exUser.member_pwd);

            //사용자 입력 암호가 일치하면
            if (result) {

              var sessionUser = {
                userPSeq: exUser.member_id,
                userId: exUser.email,
                userName: exUser.name,
                userProfile: exUser.profile_path,
              };

              //사용자 정보 전달-사용자세션값이 로그인 처리 라우팅 페이지로 전달됨...
              done(null, sessionUser);
            } else {

              //사용자 암호가 일치하지 않은 경우
              done(null, false, { message: '비밀번호가 일치하지 않습니다.' });
            }
          } else {

            //사용자 아이디가 존재하지 않은경우
            done(null, false, { message: '아이디가 존재하지 않습니다.' });
          }
        } catch (error) {
            //수집된 에러내용을 전역예외처리기로 전송합니다.
            //throw error;
          console.error(error);
          done(error);
        }

      },
    ),
  );
};




5)app.js passport 설정하기 

//일회성(휘발성) 데이터를 특정 페이지(뷰)에 전달하는 방식제공 플래시 팩키지참조하기
var flash = require('connect-flash');

//express기반 서버세션 관리 팩키지 참조하기 
var session = require('express-session');

//passport 팩키지 참조
const passport = require('passport');

sequelize.sync(); 
...

//flash 메시지 사용 활성화: cookie-parser와 express-session을 사용하므로 이들보다는 뒤로 위치
app.use(flash());


//인증관련 패스포트 개발자 정의 모듈참조,로컬로그인전략적용
const passportConfig = require('./passport/index.js');

//패스포트 설정처리
passportConfig(passport);



//노드 어플리케이션의 세션 기본 설정값 세팅하기 
app.use(
  session({
    resave: false,//세션을 항상 저장할지여부
    saveUninitialized: true, //세션이 저장되기전 초기화 안된상태로 미리 저장공간을 만들지여부
    secret: "testsecret", //세션키값을 암호할때 사용할 키값
    cookie: {
      httpOnly: true,
      secure: false,
      maxAge:1000 * 60 * 5 //5분동안 서버세션을 유지하겠다.(1000은 1초)
    },
  }),
);


//패스포트-세션 초기화 : express session 뒤에 설정
app.use(passport.initialize());
app.use(passport.session());





6)세션 사용하기 

//일반 세션조회 
var isLogined = req.session.isLogined;
var isLoginedUser = req.session.loginUser;



//패스포트객체에 저장된 사용자 세션정보 추출하기 
if(req.session.passport == undefined){
    return res.redirect("/members/login");
}else{
    var userData = req.session.passport.user;
}



7)권한 체크 미들웨어 구현 활용하기 

routes\authMiddlewares.js


    //웹페이지 라우팅 관련 인증전략정의 

    //로그인 되어있는 경우만 호출되어야하는 페이지에서 사용 : 로그아웃,파일업로드,프로파일페이지
    //로그인 되어있는경우 요청 페이지를 계속 진행하고 그렇지 않으면 로그인 필요 서버에러 발생처리
    exports.isLoggedIn = (req, res, next) => {
        if (req.isAuthenticated()) {
        next();
        } else {
        //res.status(403).send('로그인 필요');
        res.redirect('/members/login');
        }
    };


    //로그인 하지 않아도  접근이 가능한 페이지에서 사용: 회원가입,로그인 페이지
    //로그인 안되어 있으면 요청 페이지로 이동하고 이미 로그인 된경우 메인 페이지로 이동처리
    exports.isNotLoggedIn = (req, res, next) => {
        if (!req.isAuthenticated()) {
        next();
        } else {
        res.redirect('/members/list');
        }
    };


-- 권한 미들웨어 적용하기 
-routes 파일내에 참조 

//권한 미들웨어 참조 
const { isLoggedIn, isNotLoggedIn } = require('./middlewares');
  

router.get('/profile',isLoggedIn, async(req, res, next)=> {

  //로그인하지 않은 사용자인경우 로그인페이지로 강제 이동시키기 by passport
  // if(req.session.passport == undefined){
  //   return res.redirect("/member/login");
  // }


  //패스포트객체에 저장된 사용자 세션정보 추출하기 
  var userData = req.session.passport.user;
  res.render('member/profile',{userData});
  
});








